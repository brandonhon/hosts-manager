package config

import (
	"fmt"
	"os"
	"path/filepath"

	"hosts-manager/pkg/platform"

	"gopkg.in/yaml.v3"
)

type Config struct {
	General    General            `yaml:"general"`
	Categories map[string]string  `yaml:"categories"`
	Profiles   map[string]Profile `yaml:"profiles"`
	UI         UI                 `yaml:"ui"`
	Backup     Backup             `yaml:"backup"`
	Export     Export             `yaml:"export"`
}

type General struct {
	DefaultCategory string `yaml:"default_category"`
	AutoBackup      bool   `yaml:"auto_backup"`
	DryRun          bool   `yaml:"dry_run"`
	Verbose         bool   `yaml:"verbose"`
	Editor          string `yaml:"editor"`
}

type Profile struct {
	Description string   `yaml:"description"`
	Categories  []string `yaml:"categories"`
	Default     bool     `yaml:"default"`
}

type UI struct {
	ColorScheme     string            `yaml:"color_scheme"`
	ShowLineNumbers bool              `yaml:"show_line_numbers"`
	PageSize        int               `yaml:"page_size"`
	KeyBindings     map[string]string `yaml:"key_bindings"`
}

type Backup struct {
	Directory       string `yaml:"directory"`
	MaxBackups      int    `yaml:"max_backups"`
	RetentionDays   int    `yaml:"retention_days"`
	CompressionType string `yaml:"compression_type"`
}

type Export struct {
	DefaultFormat string            `yaml:"default_format"`
	Formats       map[string]Format `yaml:"formats"`
}

type Format struct {
	Extension string `yaml:"extension"`
	Template  string `yaml:"template"`
}

func DefaultConfig() *Config {
	return &Config{
		General: General{
			DefaultCategory: "custom",
			AutoBackup:      true,
			DryRun:          false,
			Verbose:         false,
			Editor:          getDefaultEditor(),
		},
		Categories: map[string]string{
			"development": "Development environments and local services",
			"staging":     "Staging and testing environments",
			"production":  "Production services and critical infrastructure",
			"custom":      "User-defined entries",
			"vpn":         "VPN and remote access configurations",
			"blocked":     "Blocked hosts for security or productivity",
		},
		Profiles: map[string]Profile{
			"minimal": {
				Description: "Minimal profile with essential entries only",
				Categories:  []string{"production"},
				Default:     false,
			},
			"development": {
				Description: "Development profile with dev and staging environments",
				Categories:  []string{"development", "staging"},
				Default:     false,
			},
			"full": {
				Description: "Full profile with all categories enabled",
				Categories:  []string{"development", "staging", "production", "custom"},
				Default:     true,
			},
		},
		UI: UI{
			ColorScheme:     "auto",
			ShowLineNumbers: true,
			PageSize:        20,
			KeyBindings: map[string]string{
				"quit":      "q",
				"help":      "?",
				"edit":      "e",
				"toggle":    "space",
				"delete":    "d",
				"search":    "/",
				"next_page": "n",
				"prev_page": "p",
				"refresh":   "r",
				"save":      "s",
			},
		},
		Backup: Backup{
			Directory:       "",
			MaxBackups:      10,
			RetentionDays:   30,
			CompressionType: "gzip",
		},
		Export: Export{
			DefaultFormat: "yaml",
			Formats: map[string]Format{
				"yaml": {
					Extension: ".yaml",
					Template:  "{{.}}",
				},
				"json": {
					Extension: ".json",
					Template:  "{{.}}",
				},
				"hosts": {
					Extension: ".hosts",
					Template:  "# Generated by hosts-manager\n{{range .Categories}}{{if .Enabled}}# {{.Name}}\n{{range .Entries}}{{if .Enabled}}{{.IP}} {{join .Hostnames \" \"}}{{if .Comment}} # {{.Comment}}{{end}}\n{{end}}{{end}}\n{{end}}{{end}}",
				},
			},
		},
	}
}

func getDefaultEditor() string {
	if editor := os.Getenv("EDITOR"); editor != "" {
		return editor
	}
	if editor := os.Getenv("VISUAL"); editor != "" {
		return editor
	}
	return "nano"
}

func Load() (*Config, error) {
	p := platform.New()
	configDir := p.GetConfigDir()
	configPath := filepath.Join(configDir, "config.yaml")

	if _, err := os.Stat(configPath); os.IsNotExist(err) {
		config := DefaultConfig()
		if err := Save(config); err != nil {
			return config, fmt.Errorf("failed to create default config: %w", err)
		}
		return config, nil
	}

	data, err := os.ReadFile(configPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read config file: %w", err)
	}

	config := DefaultConfig()
	if err := yaml.Unmarshal(data, config); err != nil {
		return nil, fmt.Errorf("failed to parse config file: %w", err)
	}

	if config.Backup.Directory == "" {
		config.Backup.Directory = filepath.Join(p.GetDataDir(), "backups")
	}

	// Validate the loaded configuration
	validator := NewValidator()
	if err := validator.Validate(config); err != nil {
		return nil, fmt.Errorf("configuration validation failed: %w", err)
	}

	return config, nil
}

func Save(config *Config) error {
	// Validate configuration before saving
	validator := NewValidator()
	if err := validator.Validate(config); err != nil {
		return fmt.Errorf("configuration validation failed: %w", err)
	}

	p := platform.New()
	configDir := p.GetConfigDir()

	if err := os.MkdirAll(configDir, 0700); err != nil {
		return fmt.Errorf("failed to create config directory: %w", err)
	}

	configPath := filepath.Join(configDir, "config.yaml")
	data, err := yaml.Marshal(config)
	if err != nil {
		return fmt.Errorf("failed to marshal config: %w", err)
	}

	if err := os.WriteFile(configPath, data, 0600); err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}

	return nil
}

func (c *Config) GetCategoryDescription(name string) string {
	if desc, exists := c.Categories[name]; exists {
		return desc
	}
	return "User-defined category"
}

func (c *Config) IsValidCategory(name string) bool {
	_, exists := c.Categories[name]
	return exists
}

func (c *Config) GetActiveProfile() string {
	for name, profile := range c.Profiles {
		if profile.Default {
			return name
		}
	}
	return "full"
}
