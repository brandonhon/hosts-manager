name: Semantic Release

on:
  push:
    branches:
      - main
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.golangci.yml'
      - '.releaserc.json'
      - '.github/workflows/semantic-release.yml'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@24
          npm install -g @semantic-release/changelog@6
          npm install -g @semantic-release/git@10
          npm install -g @semantic-release/github@10
          npm install -g conventional-changelog-conventionalcommits@8

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --debug

      - name: Get release version
        id: version
        run: |
          # Get the latest tag created in this run
          LATEST_TAG=$(git tag --sort=-version:refname | head -n1 2>/dev/null || echo "")
          # Check if this tag was created in the last minute (indicating it was just created by semantic-release)
          if [ -n "$LATEST_TAG" ]; then
            TAG_DATE=$(git log -1 --format=%ct "$LATEST_TAG" 2>/dev/null || echo "0")
            CURRENT_TIME=$(date +%s)
            TIME_DIFF=$((CURRENT_TIME - TAG_DATE))
            
            if [ $TIME_DIFF -lt 300 ]; then  # Tag created in last 5 minutes
              echo "VERSION=${LATEST_TAG}" >> $GITHUB_ENV
              echo "version=${LATEST_TAG}" >> $GITHUB_OUTPUT
              echo "New release detected: $LATEST_TAG"
              echo "HAS_RELEASE=true" >> $GITHUB_ENV
            else
              echo "No new release created in this run"
              echo "HAS_RELEASE=false" >> $GITHUB_ENV
            fi
          else
            echo "No tags found"
            echo "HAS_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Build release binaries
        if: env.HAS_RELEASE == 'true'
        run: VERSION=${{ env.VERSION }} make dist

      - name: Upload release assets
        if: env.HAS_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading assets for release ${{ env.VERSION }}..."
          for file in dist/*.tar.gz dist/*.zip dist/checksums.txt; do
            if [ -f "$file" ]; then
              echo "Uploading $(basename "$file")..."
              gh release upload ${{ env.VERSION }} "$file" --clobber
            fi
          done
          echo "All assets uploaded successfully!"